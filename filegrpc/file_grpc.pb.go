// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: file.proto

package filegrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	// image grpc call
	CreateImage(ctx context.Context, in *ImageCreateRequest, opts ...grpc.CallOption) (*ImageResponse, error)
	GetImage(ctx context.Context, in *ImageGetRequest, opts ...grpc.CallOption) (*ImageGetResponse, error)
	DeleteImage(ctx context.Context, in *ImageDeleteRequest, opts ...grpc.CallOption) (*ImageDeleteResponse, error)
	// video grpc call
	Createvideo(ctx context.Context, in *VidoeCreateRequest, opts ...grpc.CallOption) (*VideoCreateResponse, error)
	Getvideo(ctx context.Context, in *VideoGetRequest, opts ...grpc.CallOption) (*VideoGetResponse, error)
	Deletevideo(ctx context.Context, in *VideoDeleteRequest, opts ...grpc.CallOption) (*VideoDeleteResponse, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) CreateImage(ctx context.Context, in *ImageCreateRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/filegrpc.file/createImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetImage(ctx context.Context, in *ImageGetRequest, opts ...grpc.CallOption) (*ImageGetResponse, error) {
	out := new(ImageGetResponse)
	err := c.cc.Invoke(ctx, "/filegrpc.file/getImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) DeleteImage(ctx context.Context, in *ImageDeleteRequest, opts ...grpc.CallOption) (*ImageDeleteResponse, error) {
	out := new(ImageDeleteResponse)
	err := c.cc.Invoke(ctx, "/filegrpc.file/deleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Createvideo(ctx context.Context, in *VidoeCreateRequest, opts ...grpc.CallOption) (*VideoCreateResponse, error) {
	out := new(VideoCreateResponse)
	err := c.cc.Invoke(ctx, "/filegrpc.file/createvideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Getvideo(ctx context.Context, in *VideoGetRequest, opts ...grpc.CallOption) (*VideoGetResponse, error) {
	out := new(VideoGetResponse)
	err := c.cc.Invoke(ctx, "/filegrpc.file/getvideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Deletevideo(ctx context.Context, in *VideoDeleteRequest, opts ...grpc.CallOption) (*VideoDeleteResponse, error) {
	out := new(VideoDeleteResponse)
	err := c.cc.Invoke(ctx, "/filegrpc.file/deletevideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility
type FileServer interface {
	// image grpc call
	CreateImage(context.Context, *ImageCreateRequest) (*ImageResponse, error)
	GetImage(context.Context, *ImageGetRequest) (*ImageGetResponse, error)
	DeleteImage(context.Context, *ImageDeleteRequest) (*ImageDeleteResponse, error)
	// video grpc call
	Createvideo(context.Context, *VidoeCreateRequest) (*VideoCreateResponse, error)
	Getvideo(context.Context, *VideoGetRequest) (*VideoGetResponse, error)
	Deletevideo(context.Context, *VideoDeleteRequest) (*VideoDeleteResponse, error)
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (UnimplementedFileServer) CreateImage(context.Context, *ImageCreateRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (UnimplementedFileServer) GetImage(context.Context, *ImageGetRequest) (*ImageGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedFileServer) DeleteImage(context.Context, *ImageDeleteRequest) (*ImageDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedFileServer) Createvideo(context.Context, *VidoeCreateRequest) (*VideoCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Createvideo not implemented")
}
func (UnimplementedFileServer) Getvideo(context.Context, *VideoGetRequest) (*VideoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getvideo not implemented")
}
func (UnimplementedFileServer) Deletevideo(context.Context, *VideoDeleteRequest) (*VideoDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deletevideo not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filegrpc.file/createImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).CreateImage(ctx, req.(*ImageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filegrpc.file/getImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetImage(ctx, req.(*ImageGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filegrpc.file/deleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DeleteImage(ctx, req.(*ImageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Createvideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VidoeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Createvideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filegrpc.file/createvideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Createvideo(ctx, req.(*VidoeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Getvideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Getvideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filegrpc.file/getvideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Getvideo(ctx, req.(*VideoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Deletevideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Deletevideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filegrpc.file/deletevideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Deletevideo(ctx, req.(*VideoDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filegrpc.file",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createImage",
			Handler:    _File_CreateImage_Handler,
		},
		{
			MethodName: "getImage",
			Handler:    _File_GetImage_Handler,
		},
		{
			MethodName: "deleteImage",
			Handler:    _File_DeleteImage_Handler,
		},
		{
			MethodName: "createvideo",
			Handler:    _File_Createvideo_Handler,
		},
		{
			MethodName: "getvideo",
			Handler:    _File_Getvideo_Handler,
		},
		{
			MethodName: "deletevideo",
			Handler:    _File_Deletevideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}
